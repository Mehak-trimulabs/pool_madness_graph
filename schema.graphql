schema {
  query: Query
  mutation: RootMutation
}

"""
Autogenerated input type of AcceptInvitation
"""
input AcceptInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  inviteCode: String!
}

"""
Autogenerated return type of AcceptInvitation
"""
type AcceptInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pool: Pool
}

"""
A bracket
"""
type Bracket implements Node {
  bestPossibleFinish: String!
  editable: Boolean!
  eliminated: Boolean!
  finalFour: [Team]
  gameDecisions: String!
  gameMask: String!
  id: ID!
  name: String!
  owner: User!
  paymentCollector: User
  points: Int!
  pool: Pool!
  possiblePoints: Int!
  status: String!
  tieBreaker: Int
}

"""
The connection type for Bracket.
"""
type BracketConnection {
  """
  A list of edges.
  """
  edges: [BracketEdge]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BracketEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Bracket
}

"""
A stripe credit card charge
"""
type Charge {
  amount: Int!
  description: String
  stripeId: ID!
}

"""
Autogenerated input type of CreateBracket
"""
input CreateBracketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameDecisions: String!
  gameMask: String!
  name: String!
  poolId: ID!
  tieBreaker: Int!
}

"""
Autogenerated return type of CreateBracket
"""
type CreateBracketPayload {
  bracketEdge: BracketEdge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError]
  pool: Pool
}

"""
Autogenerated input type of CreateCharge
"""
input CreateChargeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  poolId: ID!
  token: String!
}

"""
Autogenerated return type of CreateCharge
"""
type CreateChargePayload {
  charge: Charge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  pool: Pool
}

"""
Current user's details
"""
type CurrentUser {
  admin: Boolean!
  email: String!
  name: String
  userId: ID!
}

"""
Autogenerated input type of DeleteBracket
"""
input DeleteBracketInput {
  bracketId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBracket
"""
type DeleteBracketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deletedBracketId: ID!
  pool: Pool
}

"""
Autogenerated input type of MarkBracketPaid
"""
input MarkBracketPaidInput {
  bracketId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of MarkBracketPaid
"""
type MarkBracketPaidPayload {
  bracket: Bracket

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError]
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A bracket pool for a tournament
"""
type Pool implements Node {
  admins: [User!]
  bracketCount: Int!
  brackets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BracketConnection
  displayBest: Boolean!
  entryFee: Int!
  id: ID!
  inviteCode: String!
  name: String!
  possibilities: [Possibility]
  started: Boolean!
  totalCollected: Int!
  tournament: Tournament!
}

"""
A possible result of a pool
"""
type Possibility {
  championships: [PossibleGame]
  firstPlace: [Bracket]
  secondPlace: [Bracket]
  thirdPlace: [Bracket]
}

"""
A possible outcome of a game
"""
type PossibleGame {
  firstTeam: Team
  losingTeam: Team
  nextGamePosition: Int
  nextGameSlot: Int
  previousSlotOne: Int
  previousSlotTwo: Int
  region: String
  roundNumber: Int!
  secondTeam: Team
  slot: Int!
  winningTeam: Team
}

"""
The query root of this schema
"""
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  viewer: Viewer!
}

"""
The mutation root of this schema
"""
type RootMutation {
  """
  Join a pool with a given invite code
  """
  acceptInvitation(input: AcceptInvitationInput!): AcceptInvitationPayload
  createBracket(input: CreateBracketInput!): CreateBracketPayload

  """
  Create a credit card charge for a group of brackets
  """
  createCharge(input: CreateChargeInput!): CreateChargePayload
  deleteBracket(input: DeleteBracketInput!): DeleteBracketPayload

  """
  Allows a pool admin to mark a bracket as paid
  """
  markBracketPaid(input: MarkBracketPaidInput!): MarkBracketPaidPayload

  """
  Update a bracket entry
  """
  updateBracket(input: UpdateBracketInput!): UpdateBracketPayload

  """
  Update the current user's profile
  """
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
}

"""
A round of games in a tournament
"""
type Round implements Node {
  endDate: String!
  id: ID!
  name: String!
  number: Int!
  regions: [String]
  startDate: String!
}

"""
A team
"""
type Team implements Node {
  id: ID!
  name: String!
  seed: Int!
  startingSlot: Int!
}

"""
Single elimination bracket tournament
"""
type Tournament implements Node {
  archived: Boolean!
  gameDecisions: String!
  gameMask: String!
  gamesRemaining: Int!
  id: ID!
  name: String!
  rounds: [Round]!
  teams: [Team]!
  tipOff: String!
}

"""
Autogenerated input type of UpdateBracket
"""
input UpdateBracketInput {
  bracketId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameDecisions: String
  gameMask: String
  name: String
  tieBreaker: Int
}

"""
Autogenerated return type of UpdateBracket
"""
type UpdateBracketPayload {
  bracket: Bracket

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError]
}

"""
Autogenerated input type of UpdateProfile
"""
input UpdateProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  name: String
}

"""
Autogenerated return type of UpdateProfile
"""
type UpdateProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError]
  viewer: Viewer
}

"""
User's details
"""
type User implements Node {
  id: ID!
  name: String!
}

type ValidationError {
  key: String
  messages: [String]!
}

"""
The top level view of the graph
"""
type Viewer implements Node {
  currentUser: CurrentUser
  id: ID!

  """
  All pools associated with current user
  """
  pools: [Pool]!
}